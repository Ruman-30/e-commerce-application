paths:
  /order:
    post:
      summary: Create a new order
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shippingAddress
                - paymentMethod
              properties:
                shippingAddress:
                  type: object
                  required:
                    - fullName
                    - street
                    - country
                    - state
                    - postalCode
                    - phone
                    - city
                  properties:
                    fullName:
                      type: string
                      example: "John Doe"
                    street:
                      type: string
                      example: "123 Main St"
                    country:
                      type: string
                      example: "India"
                    state:
                      type: string
                      example: "Maharashtra"
                    city:
                      type: string
                      example: "Mumbai"
                    postalCode:
                      type: string
                      example: "400001"
                    phone:
                      type: string
                      example: "9876543210"
                paymentMethod:
                  type: string
                  enum: ["COD", "Card", "UPI", "NetBanking"]
                  example: "COD"
      responses:
        "201":
          description: Order placed successfully (COD)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order placed successfully (COD)."
                  order:
                    $ref: "#/components/schemas/Order"
        "200":
          description: Razorpay order created (Payment pending)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Razorpay order created. Complete payment to confirm."
                  order:
                    $ref: "#/components/schemas/Order"
                  razorpayOrder:
                    type: object
                    description: Razorpay order details
                    properties:
                      id:
                        type: string
                        example: "order_HK123456789"
                      amount:
                        type: number
                        example: 1500
                      currency:
                        type: string
                        example: "INR"
        "400":
          description: Bad Request - Missing shipping address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Shipping address is required"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found or empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is empty"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
  /order/{orderId}:                  
    get:
      summary: Find an order by ID
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: ID of the order to fetch
          example: "68c7e960204d00badde4ab0b"
      responses:
        "200":
          description: Order fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order fetched successfully."
                  order:
                    $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found!"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order can't be fetched."
                  error:
                    type: string
  /order/all-orders:
    get:
      summary: Get all orders of the logged-in user (with pagination)
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of orders per page
          example: 10
      responses:
        "200":
          description: Orders fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Orders fetched successfully"
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalOrders:
                    type: integer
                    example: 45
                  order:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrderSummary"
        "400":
          description: No orders found for this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No order yet from this user."
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Database connection failed"
  /order/{orderId}/status:
    patch:
      summary: Update order status (Admin only)
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [Pending, Confirmed, Shipped, Delivered, Cancelled]
                  example: Shipped
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated successfully.
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Invalid status value
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid status value
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order not found
        "500":
          description: Server error while updating order
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating order status
                  error:
                    type: string
  /order/{orderId}/cancel:
    patch:
      summary: Cancel an order (User only)
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: ID of the order to cancel
      responses:
        "200":
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order cancelled successfully.
                  order:
                    $ref: "#/components/schemas/Order"
        "404":
          description: Order cannot be cancelled (already shipped/delivered or not user's order)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order cannot be cancelled (maybe already shipped/delivered or not your order).
        "500":
          description: Server error while cancelling order
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error cancelling order
                  error:
                    type: string    
  /order/admin/orders:
    get:
      summary: Get all orders (Admin only)
      tags: [Orders]
      security:
        - bearerAuth: []   # JWT required
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of orders per page
        - in: query
          name: status
          schema:
            type: string
            enum: [Pending, Confirmed, Shipped, Delivered, Cancelled]
          description: Filter orders by status
      responses:
        "200":
          description: Orders fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order's fetched successfully.
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalOrders:
                    type: integer
                    example: 42
                  orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized. Please log in.              
        "404":
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No orders found.
        "500":
          description: Server error while fetching orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server Error
                  error:
                    type: string                                                
components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
          example: "68c7e960204d00badde4ab0b"
        user:
          type: string
          example: "689c6ebcaded42b334aa755d"
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
                example: "68c15b1c7cae09a67e4ff1b9"
              quantity:
                type: integer
                example: 2
              price:
                type: number
                example: 699
              name:
                type: string
                example: "Apple Airpods Pro"
              image:
                type: string
                example: "https://res.cloudinary.com/do7x5udgg/image/upload/v1757502236/ecommerce/products/sample.jpg"
        totalAmount:
          type: number
          example: 1398
        shippingAddress:
          type: object
          properties:
            fullName:
              type: string
              example: "John Doe"
            street:
              type: string
              example: "123 Main St"
            city:
              type: string
              example: "Mumbai"
            state:
              type: string
              example: "Maharashtra"
            country:
              type: string
              example: "India"
            postalCode:
              type: string
              example: "400001"
            phone:
              type: string
              example: "9876543210"
        paymentMethod:
          type: string
          example: "COD"
        payment:
          type: object
          properties:
            paymentStatus:
              type: string
              example: "Pending"
        status:
          type: string
          example: "Pending"
        createdAt:
          type: string
          format: date-time
          example: "2025-09-15T10:24:32.796Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-09-15T10:24:32.796Z"
    OrderSummary:
      type: object
      properties:
        orderId:
          type: string
          example: "68c7e960204d00badde4ab0b"
        totalAmount:
          type: number
          example: 1398
        createdAt:
          type: string
          format: date-time
          example: "2025-09-15T10:24:32.796Z"
        shippingAddress:
          type: object
          properties:
            fullName:
              type: string
              example: "John Doe"
            city:
              type: string
              example: "Mumbai"
            country:
              type: string
              example: "India"
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                example: "68c15b1c7cae09a67e4ff1b9"
              name:
                type: string
                example: "Apple Airpods Pro"
              image:
                type: string
                nullable: true
                example: "https://res.cloudinary.com/do7x5udgg/image/upload/v1757502236/ecommerce/products/sample.jpg"
              price:
                type: number
                example: 699
              quantity:
                type: integer
                example: 2
              itemTotal:
                type: number
                example: 1398
